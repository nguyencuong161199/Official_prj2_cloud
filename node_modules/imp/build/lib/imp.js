(function(){
  var define, slice$ = [].slice;
  if (typeof define !== 'function') {
    define = require('amdefine')(module);
  }
  define(function(){
    var Imp;
    return Imp = (function(){
      Imp.displayName = 'Imp';
      var prototype = Imp.prototype, constructor = Imp;
      function Imp(){
        this.defs = {};
      }
      prototype.def = function(cF, cT, f){
        var ref$;
        ((ref$ = this.defs)[cF] || (ref$[cF] = {}))[cT] = f;
      };
      prototype.undef = function(cF, cT, f){
        var ref;
        if ((ref = this.defs[cF])[cT]) {
          delete ref[cT];
          if (ref === {}) {
            delete this.defs[cF];
          }
        }
      };
      prototype.isDef = function(cF, cT){
        var ref$;
        return ((ref$ = this.defs[cF]) != null ? ref$[cT] : void 8) != null;
      };
      prototype.conv = function(o, cT){
        var ref$;
        return (ref$ = this.defs[o.constructor]) != null ? typeof ref$[cT] == 'function' ? ref$[cT](o) : void 8 : void 8;
      };
      prototype.wrap = function(){
        var sig, this$ = this;
        sig = slice$.call(arguments);
        return function(f){
          return function(){
            var args, aT, i, t, num, a;
            args = slice$.call(arguments);
            aT = [];
            i = 0;
            while (i < sig.length) {
              t = sig[i];
              if (t instanceof Array) {
                t = t[0];
                num = args.length - sig.length + 1;
                while (num-- > 0) {
                  a = args.shift();
                  aT.push(a.constructor === t
                    ? a
                    : this$.conv(a, t));
                }
              } else {
                a = args.shift();
                aT.push(a.constructor === t
                  ? a
                  : this$.conv(a, t));
              }
              i++;
            }
            return f.apply(null, aT);
          };
        };
      };
      return Imp;
    }());
  });
}).call(this);
